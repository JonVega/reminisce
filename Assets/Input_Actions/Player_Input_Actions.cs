//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input_Actions/Player_Input_Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player_Input_Actions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player_Input_Actions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player_Input_Actions"",
    ""maps"": [
        {
            ""name"": ""User"",
            ""id"": ""68392f19-9a13-4443-bc3c-0ccbe9295d5b"",
            ""actions"": [
                {
                    ""name"": ""move"",
                    ""type"": ""Value"",
                    ""id"": ""eb63df44-a7bd-40f6-b688-7f9bd9f34911"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""jump"",
                    ""type"": ""Button"",
                    ""id"": ""32e17ca1-7e88-483e-bff7-7b91c46ddab4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""mouseX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""44f67728-7832-487c-94ba-0c481342aa2d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""mouseY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0adfa3bb-7e20-4097-b193-2a4091817ddf"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""741e0aed-76aa-45f5-8e55-76286def81f0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c4ca1910-9de2-454e-82df-0cbbf9379084"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""53302592-398e-4b0a-aafd-0b4bf0d19a86"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f9705be9-4f82-4ff0-ac81-2d2beb85ecb2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0190607c-ffab-4502-b7e2-955e2e94ae10"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9853da18-970c-4907-9c13-0fbbaf31002e"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ecacab73-60ed-4b87-b616-806b8cebe6c7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4a66dfd-e63d-4bea-9eda-53f66a6eeaf9"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""961df1d9-dd5e-42ab-8c0e-657e57895b2e"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouseX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30e7ecbf-50b1-48e7-ad13-9c315fa5aeaa"",
                    ""path"": ""<Gamepad>/rightStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouseX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4360389b-2ac2-4448-bbed-edf44e6cb2a7"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouseY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""689862e6-6f1d-4b9f-b540-6f0a3b491826"",
                    ""path"": ""<Gamepad>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouseY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // User
        m_User = asset.FindActionMap("User", throwIfNotFound: true);
        m_User_move = m_User.FindAction("move", throwIfNotFound: true);
        m_User_jump = m_User.FindAction("jump", throwIfNotFound: true);
        m_User_mouseX = m_User.FindAction("mouseX", throwIfNotFound: true);
        m_User_mouseY = m_User.FindAction("mouseY", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // User
    private readonly InputActionMap m_User;
    private IUserActions m_UserActionsCallbackInterface;
    private readonly InputAction m_User_move;
    private readonly InputAction m_User_jump;
    private readonly InputAction m_User_mouseX;
    private readonly InputAction m_User_mouseY;
    public struct UserActions
    {
        private @Player_Input_Actions m_Wrapper;
        public UserActions(@Player_Input_Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @move => m_Wrapper.m_User_move;
        public InputAction @jump => m_Wrapper.m_User_jump;
        public InputAction @mouseX => m_Wrapper.m_User_mouseX;
        public InputAction @mouseY => m_Wrapper.m_User_mouseY;
        public InputActionMap Get() { return m_Wrapper.m_User; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UserActions set) { return set.Get(); }
        public void SetCallbacks(IUserActions instance)
        {
            if (m_Wrapper.m_UserActionsCallbackInterface != null)
            {
                @move.started -= m_Wrapper.m_UserActionsCallbackInterface.OnMove;
                @move.performed -= m_Wrapper.m_UserActionsCallbackInterface.OnMove;
                @move.canceled -= m_Wrapper.m_UserActionsCallbackInterface.OnMove;
                @jump.started -= m_Wrapper.m_UserActionsCallbackInterface.OnJump;
                @jump.performed -= m_Wrapper.m_UserActionsCallbackInterface.OnJump;
                @jump.canceled -= m_Wrapper.m_UserActionsCallbackInterface.OnJump;
                @mouseX.started -= m_Wrapper.m_UserActionsCallbackInterface.OnMouseX;
                @mouseX.performed -= m_Wrapper.m_UserActionsCallbackInterface.OnMouseX;
                @mouseX.canceled -= m_Wrapper.m_UserActionsCallbackInterface.OnMouseX;
                @mouseY.started -= m_Wrapper.m_UserActionsCallbackInterface.OnMouseY;
                @mouseY.performed -= m_Wrapper.m_UserActionsCallbackInterface.OnMouseY;
                @mouseY.canceled -= m_Wrapper.m_UserActionsCallbackInterface.OnMouseY;
            }
            m_Wrapper.m_UserActionsCallbackInterface = instance;
            if (instance != null)
            {
                @move.started += instance.OnMove;
                @move.performed += instance.OnMove;
                @move.canceled += instance.OnMove;
                @jump.started += instance.OnJump;
                @jump.performed += instance.OnJump;
                @jump.canceled += instance.OnJump;
                @mouseX.started += instance.OnMouseX;
                @mouseX.performed += instance.OnMouseX;
                @mouseX.canceled += instance.OnMouseX;
                @mouseY.started += instance.OnMouseY;
                @mouseY.performed += instance.OnMouseY;
                @mouseY.canceled += instance.OnMouseY;
            }
        }
    }
    public UserActions @User => new UserActions(this);
    public interface IUserActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnMouseX(InputAction.CallbackContext context);
        void OnMouseY(InputAction.CallbackContext context);
    }
}
